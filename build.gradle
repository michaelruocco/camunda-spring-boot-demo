plugins {
    id "java-library"
    id "java-test-fixtures"
    id "jacoco"
    id "maven-publish"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id "com.diffplug.spotless" version "6.5.2"
    id "com.github.ben-manes.versions" version "0.42.0"
    id "pl.allegro.tech.build.axion-release" version "1.13.6"
    id "org.sonarqube" version "3.3"
    id "com.adarshr.test-logger" version "3.2.0"
    id "nebula.lint" version "17.7.0"
    id "org.springframework.boot" version "2.6.7"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "com.bmuschko.docker-remote-api" version "7.3.0"
    id "com.avast.gradle.docker-compose" version "0.16.3"
    id "com.github.node-gradle.node" version "3.2.1"
    id "org.unbroken-dome.test-sets" version "4.0.0"
}

group "com.github.michaelruocco"

ext {
    lombokVersion = "1.18.24"
    camundaVersion = "7.17.0"
    awsSdkVersion = "2.17.186"
    keycloakVersion = "15.0.2"

    junitVersion = "5.8.2"
    mockitoVersion = "4.5.1"
    systemStubsVersion = "2.0.1"

    imageName = "michaelruocco/${project.name}"
}
ext['junit-jupiter.version'] = "${junitVersion}"

scmVersion {
    versionCreator "versionWithBranch"
    tag {
        prefix = "${name}-"
    }
}
project.version = scmVersion.version

testSets {
    integrationTest
}

repositories {
    mavenCentral()
}

gradleLint {
    rules = ['all-dependency']
    alwaysRun = false
}

dependencyManagement {
    imports {
        mavenBom "org.keycloak.bom:keycloak-adapter-bom:${keycloakVersion}"
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    runtimeOnly "com.h2database:h2:2.1.212"
    implementation "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:${camundaVersion}"
    implementation "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:${camundaVersion}"
    implementation "org.camunda.bpm.extension:camunda-bpm-identity-keycloak:2.2.3"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.kafka:spring-kafka:2.8.5"
    implementation "org.apache.kafka:kafka-streams:3.1.0"
    implementation "org.camunda.bpm:camunda-engine-plugin-spin:${camundaVersion}"
    implementation "org.camunda.spin:camunda-spin-dataformat-all:1.15.0"
    implementation "software.amazon.awssdk:s3:${awsSdkVersion}"
    implementation "io.projectreactor:reactor-core:3.4.17"
    implementation "com.github.michaelruocco:json-adapter:1.0.4"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation "org.assertj:assertj-core:3.22.0"
    testImplementation "net.javacrumbs.json-unit:json-unit-assertj:2.35.0"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "net.bytebuddy:byte-buddy:1.12.10"
    testImplementation "org.camunda.bpm.extension:camunda-bpm-junit5:1.1.0"
    testImplementation "org.camunda.bpm.extension.mockito:camunda-bpm-mockito:5.16.0"
    testImplementation "org.camunda.bpm.assert:camunda-bpm-assert:15.0.0"
    testImplementation "uk.org.webcompere:system-stubs-jupiter:${systemStubsVersion}"

    integrationTestCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    integrationTestAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    integrationTestImplementation "uk.org.webcompere:system-stubs-jupiter:${systemStubsVersion}"
    integrationTestImplementation "org.testcontainers:junit-jupiter:1.17.1"

    testFixturesCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testFixturesAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testFixturesImplementation "com.github.michaelruocco:file-loader:6.0.5"
    testFixturesImplementation "org.camunda.bpm:camunda-engine:${camundaVersion}"
    testFixturesImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testFixturesImplementation "software.amazon.awssdk:s3:${awsSdkVersion}"
    testFixturesImplementation "org.awaitility:awaitility:4.2.0"
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

bootRun {
    jvmArgs = [
            "-Dserver.port=8090",
            "-Dspring.profiles.active=stubbed",
            "-Dspring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration"
    ]
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty "org.slf4j.simpleLogger.defaultLogLevel", "debug"
}

integrationTest {
    systemProperty "javax.net.ssl.trustStore", "${projectDir}/keycloak/certs/truststore.jks"
    systemProperty "javax.net.ssl.trustStorePassword", "changeit"
}

testlogger {
    theme 'mocha'
    showStandardStreams true
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test
    sourceSets sourceSets.main
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }
}

project.tasks["sonarqube"].dependsOn jacocoTestReport
sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "michaelruocco"
        property "sonar.projectKey", "michaelruocco_${name}"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/report.xml"
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task buildImage(type: DockerBuildImage) {
    mustRunAfter(spotlessApply, assemble, test, integrationTest)
    inputDir.set(file("."))
    images.add("${imageName}:${version}")
    buildArgs = ["VERSION": version]
}

dockerCompose {
    environment.put 'APP_VERSION', version
}

task installNewman(type: NpmTask) {
    args = ['install', 'newman', '--save-dev']
}

task postman(type: NpxTask) {
    dependsOn installNewman
    command = 'newman'
    args = [
            'run',
            '--bail', 'true',
            '--environment', 'postman/camunda-demo-local.postman_environment.json',
            'postman/camunda-demo.postman_collection.json',
    ]
}

def gitUrl = "https://github.com/michaelruocco/camunda-spring-boot-demo"
def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "https://opensource.org/licenses/MIT"
            distribution "repo"
        }
    }

    developers {
        developer {
            id "mruoc"
            name "Michael Ruocco"
            email "michael.ruocco@hotmail.com"
        }
    }

    scm {
        url gitUrl
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("OSSRH_USERNAME")
            password = System.getenv("OSSRH_PASSWORD")
        }
    }
}

publishing {
    publications {
        lib(MavenPublication) {
            from components.java
            pom.withXml {
                def root = asNode()
                root.appendNode("description", "Template repo to speed up creating new library projects")
                root.appendNode("name", project.name)
                root.appendNode("url", gitUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

signing {
    def signingKey = System.getenv("OSSRH_PGP_SECRET_KEY")
    def signingPassword = System.getenv("OSSRH_PGP_SECRET_KEY_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.lib
}
signLibPublication.enabled = gradle.startParameter.taskNames.contains("publishToSonatype")

spotless {
    java {
        removeUnusedImports()
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()

        replace 'Not enough space after if', 'if(', 'if ('
        replaceRegex 'Too much space after if', 'if +\\(', 'if ('

        replace 'Not enough space after for', 'for(', 'for ('
        replaceRegex 'Too much space after for', 'for +\\(', 'for ('

        replace 'Not enough space after while', 'while(', 'while ('
        replaceRegex 'Too much space after while', 'while +\\(', 'while ('
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview"].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject("Release candidate")
            }
        }
    }
}
